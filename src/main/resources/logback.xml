<?xml version="1.0" encoding="UTF-8"?>
<!--scan:
            当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:
            设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:
            当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。

configuration 子节点为 appender、logger、root

            -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--用于区分不同应用程序的记录-->
<!--    <property name="APP_Name" value="logger-service" />-->
<!--    <contextName>${APP_Name}</contextName>-->
<!--    <property name="SERVICE_NAME" value="${SERVICE_NAME:-default-service}" />-->
    <!--日志文件所在目录，如果是tomcat，如下写法日志文件会在则为${TOMCAT_HOME}/bin/logs/目录下-->
    <property resource="application.properties" />
    <property name="SERVICE_NAME" value="${service.name:-default-service}" />
    <!--控制台-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
<!--        <encoder>-->
<!--            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 &ndash;&gt;-->
<!--&lt;!&ndash;            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>&ndash;&gt;-->
<!--&lt;!&ndash;            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %msg%n</pattern>&ndash;&gt;-->
<!--            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level ${SERVICE_NAME}  %msg%n%ex{full}%n</pattern>-->
<!--            &lt;!&ndash;解决乱码问题&ndash;&gt;-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <fieldNames>
                <timestamp>timestamp</timestamp>
                <message>message</message>
                <logger>[ignore]</logger>
                <thread>thread</thread>
                <level>level</level>
                <version>[ignore]</version>
                <levelValue>[ignore]</levelValue>
            </fieldNames>
            <customFields>{"service_name":"${SERVICE_NAME}"}</customFields>
            <!-- 添加 MDC 提供者 -->
            <provider class="net.logstash.logback.composite.loggingevent.MdcJsonProvider"/>
            <charset>UTF-8</charset>
            <!-- 或者，如果你只想包含特定的 MDC 键 -->
<!--            <provider class="net.logstash.logback.composite.loggingevent.MdcJsonProvider">-->
<!--                <includeMdcKeyName>param1</includeMdcKeyName>-->
<!--                <includeMdcKeyName>param2</includeMdcKeyName>-->
<!--            </provider>-->
            <includeMdcKeyName>traceId</includeMdcKeyName>
        </encoder>
    </appender>
    <!-- 设置 Spring 框架的日志级别为 OFF -->
    <logger name="org.springframework" level="WARN" />

    <!-- 设置其他常见的系统日志级别为 OFF -->
    <logger name="org.hibernate" level="WARN" />
    <logger name="org.apache" level="WARN" />
    <logger name="com.zaxxer.hikari" level="WARN" />
    <logger name="com.baomidou" level="WARN" />

<!--    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <file>logs/application.log</file>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>logs/application.%d{yyyy-MM-dd}.log</fileNamePattern>-->
<!--            <maxHistory>30</maxHistory>-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level ${SERVICE_NAME}  %msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">-->
<!--        &lt;!&ndash; 引用之前定义的 FILE appender &ndash;&gt;-->
<!--        <appender-ref ref="FILE" />-->
<!--        &lt;!&ndash; 配置队列大小 &ndash;&gt;-->
<!--        <queueSize>512</queueSize>-->
<!--        &lt;!&ndash; 丢弃日志的阈值，队列剩余容量小于这个值时，会丢弃TRACE、DEBUG和INFO级别的日志 &ndash;&gt;-->
<!--        <discardingThreshold>0</discardingThreshold>-->
<!--        &lt;!&ndash; 是否包含调用者数据 &ndash;&gt;-->
<!--        <includeCallerData>false</includeCallerData>-->
<!--        &lt;!&ndash; 队列满时是否阻塞 &ndash;&gt;-->
<!--        <neverBlock>false</neverBlock>-->
<!--    </appender>-->

    <!--滚动文件-->
<!--    <appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>INFO</level>-->
<!--        </filter>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${LOG_HOME}/log.%d{yyyy-MM-dd}.log</fileNamePattern>-->
<!--            <maxHistory>30</maxHistory>&lt;!&ndash;保存最近30天的日志&ndash;&gt;-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <charset>UTF-8</charset>-->
<!--            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash;滚动文件&ndash;&gt;-->
<!--    <appender name="errorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>error</level>-->
<!--        </filter>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.log</fileNamePattern>-->
<!--            <maxHistory>30</maxHistory>&lt;!&ndash;保存最近30天的日志&ndash;&gt;-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <charset>UTF-8</charset>-->
<!--            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!--将日志输出到logstack-->
    <!--<appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>47.93.173.81:7002</destination>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <charset>UTF-8</charset>
        </encoder>
        <keepAliveDuration>5 minutes</keepAliveDuration>
    </appender>-->

    <!--这里如果是info，spring、mybatis等框架则不会输出：TRACE < DEBUG < INFO <  WARN < ERROR-->
    <!--root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找
    父logger看有没有指定级别，直到找到root。-->
    <root level="info">
        <appender-ref ref="stdout"/>
<!--        <appender-ref ref="ASYNC" />-->
<!--        <appender-ref ref="infoFile"/>-->
<!--        <appender-ref ref="errorFile"/>-->
<!--        <appender-ref ref="logstash"/>-->
    </root>

    <!--为某个包单独配置logger

    比如定时任务，写代码的包名为：com.seentao.task
    步骤如下：
    1、定义一个appender，取名为task（随意，只要下面logger引用就行了）
    appender的配置按照需要即可


    2、定义一个logger:
    <logger name="com.seentao.task" level="DEBUG" additivity="false">
      <appender-ref ref="task" />
    </logger>
    注意：additivity必须设置为false，这样只会交给task这个appender，否则其他appender也会打印com.seentao.task里的log信息。

    3、这样，在com.seentao.task的logger就会是上面定义的logger了。
    private static Logger logger = LoggerFactory.getLogger(Class1.class);
    -->

</configuration>